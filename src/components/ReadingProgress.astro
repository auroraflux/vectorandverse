---
// Reading progress component
---

<style is:global>
  .reading-progress-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 0%;
    height: 6px;
    background: linear-gradient(90deg, 
      #3b82f6 0%, 
      #fb923c 33%, 
      #14b8a6 66%,
      #9333ea 100%
    );
    z-index: 1000;
    transition: width 0.2s ease-out;
    box-shadow: 
      0 -2px 20px rgba(59, 130, 246, 0.8),
      0 -4px 30px rgba(59, 130, 246, 0.5);
  }
</style>

<script>
  let scrollHandler;
  let resizeHandler;
  let animationFrameId;
  
  function initProgressBar() {
    // Clean up any existing handlers first
    cleanupProgressBar();
    
    // Only run on article pages
    const article = document.querySelector('article');
    if (!article) return;
    
    // Remove any existing progress bar
    const existingBar = document.querySelector('.reading-progress-bar');
    if (existingBar) existingBar.remove();
    
    // Create progress bar element
    const progressBar = document.createElement('div');
    progressBar.className = 'reading-progress-bar';
    document.body.appendChild(progressBar);
    
    // Calculate progress on scroll
    const updateProgress = () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      // Account for the fact that you can't scroll past documentHeight - windowHeight
      const scrollableHeight = documentHeight - windowHeight;
      const progress = (scrollTop / scrollableHeight) * 100;
      
      // Update progress bar width
      progressBar.style.width = `${Math.min(100, Math.max(0, progress))}%`;
    };
    
    // Throttle scroll events for performance
    let ticking = false;
    scrollHandler = () => {
      if (!ticking) {
        animationFrameId = requestAnimationFrame(() => {
          updateProgress();
          ticking = false;
        });
        ticking = true;
      }
    };
    
    resizeHandler = updateProgress;
    
    // Listen for scroll events
    window.addEventListener('scroll', scrollHandler);
    window.addEventListener('resize', resizeHandler);
    
    // Initial update
    updateProgress();
  }
  
  function cleanupProgressBar() {
    // Remove event listeners
    if (scrollHandler) {
      window.removeEventListener('scroll', scrollHandler);
      scrollHandler = null;
    }
    if (resizeHandler) {
      window.removeEventListener('resize', resizeHandler);
      resizeHandler = null;
    }
    
    // Cancel any pending animation frame
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
      animationFrameId = null;
    }
    
    // Remove progress bar element
    const progressBar = document.querySelector('.reading-progress-bar');
    if (progressBar) progressBar.remove();
  }

  // Initialize on page load
  initProgressBar();
  
  // Re-initialize on Astro page navigation
  document.addEventListener('astro:page-load', initProgressBar);
  
  // Clean up on page navigation
  document.addEventListener('astro:before-swap', cleanupProgressBar);
</script>