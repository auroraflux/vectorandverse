---
export interface Props {
  prevPost?: {
    slug: string;
    title: string;
  };
  nextPost?: {
    slug: string;
    title: string;
  };
}

const { prevPost, nextPost } = Astro.props;
---

<!-- Visual indicators for swipe navigation -->
{(prevPost || nextPost) && (
  <div class="swipe-nav-indicators">
    {prevPost && (
      <div class="swipe-indicator swipe-indicator-prev" aria-label={`Previous: ${prevPost.title}`}>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </div>
    )}
    {nextPost && (
      <div class="swipe-indicator swipe-indicator-next" aria-label={`Next: ${nextPost.title}`}>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </div>
    )}
  </div>
)}

<style>
  @import "tailwindcss";
  @reference;
  
  .swipe-nav-indicators {
    @apply md:hidden fixed top-1/2 left-0 right-0 z-20 pointer-events-none;
    transform: translateY(-50%);
  }
  
  .swipe-indicator {
    @apply absolute flex items-center justify-center w-12 h-12 bg-black/10 backdrop-blur-sm text-white rounded-full opacity-0 transition-opacity duration-300 pointer-events-auto;
  }
  
  .swipe-indicator-prev {
    @apply left-4;
  }
  
  .swipe-indicator-next {
    @apply right-4;
  }
  
  /* Show indicators on touch */
  body.swiping .swipe-indicator {
    @apply opacity-100;
  }
  
  /* Pulse animation when ready to navigate */
  .swipe-indicator.ready {
    animation: pulse 0.5s ease-in-out;
  }
  
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
  }
</style>

<script define:vars={{ prevPost, nextPost }}>
  function initSwipeNavigation() {
    // Only run on touch devices
    if ('ontouchstart' in window) {
      let touchStartX = 0;
      let touchStartY = 0;
      let touchEndX = 0;
      let touchEndY = 0;
      let isSwiping = false;
      
      const minSwipeDistance = 75; // Minimum distance for a swipe
      const maxVerticalDistance = 100; // Maximum vertical movement allowed
      
      function handleTouchStart(e) {
        touchStartX = e.changedTouches[0].screenX;
        touchStartY = e.changedTouches[0].screenY;
      }
      
      function handleTouchMove(e) {
        if (!isSwiping) {
          const currentX = e.changedTouches[0].screenX;
          const currentY = e.changedTouches[0].screenY;
          const deltaX = Math.abs(currentX - touchStartX);
          const deltaY = Math.abs(currentY - touchStartY);
          
          // Check if horizontal swipe
          if (deltaX > 30 && deltaX > deltaY) {
            isSwiping = true;
            document.body.classList.add('swiping');
            
            // Show which direction user is swiping
            const direction = currentX < touchStartX ? 'next' : 'prev';
            const indicator = document.querySelector(`.swipe-indicator-${direction}`);
            if (indicator && ((direction === 'next' && nextPost) || (direction === 'prev' && prevPost))) {
              if (deltaX > minSwipeDistance) {
                indicator.classList.add('ready');
              } else {
                indicator.classList.remove('ready');
              }
            }
          }
        }
        
        touchEndX = e.changedTouches[0].screenX;
        touchEndY = e.changedTouches[0].screenY;
      }
      
      function handleTouchEnd() {
        if (!isSwiping) {
          document.body.classList.remove('swiping');
          return;
        }
        
        const deltaX = touchEndX - touchStartX;
        const deltaY = Math.abs(touchEndY - touchStartY);
        
        // Check if swipe is mostly horizontal
        if (Math.abs(deltaX) > minSwipeDistance && deltaY < maxVerticalDistance) {
          if (deltaX > 0 && prevPost) {
            // Swipe right - go to previous post
            window.location.href = `/blog/${prevPost.slug}`;
          } else if (deltaX < 0 && nextPost) {
            // Swipe left - go to next post
            window.location.href = `/blog/${nextPost.slug}`;
          }
        }
        
        // Reset
        isSwiping = false;
        document.body.classList.remove('swiping');
        document.querySelectorAll('.swipe-indicator').forEach(el => {
          el.classList.remove('ready');
        });
      }
      
      // Add event listeners to article content area only
      const articleContent = document.getElementById('main-content');
      if (articleContent) {
        articleContent.addEventListener('touchstart', handleTouchStart, { passive: true });
        articleContent.addEventListener('touchmove', handleTouchMove, { passive: true });
        articleContent.addEventListener('touchend', handleTouchEnd, { passive: true });
        
        // Cleanup function
        const cleanup = () => {
          articleContent.removeEventListener('touchstart', handleTouchStart);
          articleContent.removeEventListener('touchmove', handleTouchMove);
          articleContent.removeEventListener('touchend', handleTouchEnd);
          document.body.classList.remove('swiping');
          document.querySelectorAll('.swipe-indicator').forEach(el => {
            el.classList.remove('ready');
          });
        };
        
        // Store cleanup function for later use
        window.__swipeNavigationCleanup = cleanup;
      }
    }
  }
  
  // Initialize on page load
  document.addEventListener('astro:page-load', initSwipeNavigation);
  
  // Clean up on page navigation
  document.addEventListener('astro:before-swap', () => {
    if (window.__swipeNavigationCleanup) {
      window.__swipeNavigationCleanup();
      delete window.__swipeNavigationCleanup;
    }
  });
</script>

<!-- Traditional navigation links for desktop and accessibility -->
<nav class="post-navigation mt-16 pt-8 border-t border-gray-200">
  <div class="flex justify-between items-center gap-4">
    {prevPost && (
      <a href={`/blog/${prevPost.slug}`} class="group flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors touch-target touch-focus">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 transition-transform group-hover:-translate-x-1">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
        </svg>
        <span class="text-sm font-weight-500">Previous</span>
      </a>
    )}
    {nextPost && (
      <a href={`/blog/${nextPost.slug}`} class="group flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors ml-auto touch-target touch-focus">
        <span class="text-sm font-weight-500">Next</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 transition-transform group-hover:translate-x-1">
          <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
        </svg>
      </a>
    )}
  </div>
</nav>