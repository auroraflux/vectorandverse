---
// Lightbox component - client-side only
---

<div id="lightbox" class="lightbox" aria-hidden="true">
  <button class="lightbox-close" aria-label="Close lightbox">&times;</button>
  <img class="lightbox-image" src="" alt="" />
</div>

<style>
  @import "tailwindcss";
  @reference;
  
  .lightbox {
    @apply fixed inset-0 z-50 flex items-center justify-center bg-black/95 opacity-0 pointer-events-none transition-opacity duration-300;
  }
  
  .lightbox.active {
    @apply opacity-100 pointer-events-auto;
  }
  
  .lightbox-close {
    @apply absolute top-4 right-4 text-white text-4xl font-light hover:text-gray-300 transition-colors;
    background: none;
    border: none;
    cursor: pointer;
    z-index: 10;
  }
  
  .lightbox-image {
    @apply max-w-[90vw] max-h-[90vh] object-contain;
  }
</style>

<script>
  // Use a global flag to ensure we only set up listeners once
  let lightboxInitialized = false;
  
  function setupLightbox() {
    if (lightboxInitialized) return;
    lightboxInitialized = true;
    
    // Global click handler using event delegation
    document.addEventListener('click', handleClick);
    
    // ESC key handler
    document.addEventListener('keydown', handleKeydown);
  }
  
  function handleClick(e: MouseEvent) {
    const target = e.target as HTMLElement;
    
    // Check if clicked element is an image with lightbox attribute
    if (target.tagName === 'IMG' && target.dataset.lightbox === 'true') {
      e.preventDefault();
      openLightbox(target);
      return;
    }
    
    // Check if clicked element is the close button
    if (target.classList.contains('lightbox-close')) {
      e.preventDefault();
      closeLightbox();
      return;
    }
    
    // Check if clicked element is the lightbox backdrop
    if (target.id === 'lightbox') {
      closeLightbox();
      return;
    }
  }
  
  function handleKeydown(e: KeyboardEvent) {
    if (e.key === 'Escape') {
      const lightbox = document.getElementById('lightbox');
      if (lightbox?.classList.contains('active')) {
        closeLightbox();
      }
    }
  }
  
  function openLightbox(img: HTMLElement) {
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = lightbox?.querySelector('.lightbox-image') as HTMLImageElement;
    const fullSrc = img.dataset.fullSrc;
    
    if (!lightbox || !lightboxImg || !fullSrc) return;
    
    // Set image source and alt text
    lightboxImg.src = fullSrc;
    lightboxImg.alt = img.getAttribute('alt') || '';
    
    // Show lightbox
    requestAnimationFrame(() => {
      lightbox.classList.add('active');
      lightbox.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      
      // Focus close button for accessibility
      const closeBtn = lightbox.querySelector('.lightbox-close') as HTMLButtonElement;
      closeBtn?.focus();
    });
  }
  
  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    if (!lightbox) return;
    
    lightbox.classList.remove('active');
    lightbox.setAttribute('aria-hidden', 'true');
    document.body.style.overflow = '';
    
    // Clear image source after transition
    setTimeout(() => {
      const lightboxImg = lightbox.querySelector('.lightbox-image') as HTMLImageElement;
      if (lightboxImg) {
        lightboxImg.src = '';
      }
    }, 300);
  }
  
  // Initialize immediately
  setupLightbox();
  
  // Also ensure it's set up after DOM content is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupLightbox);
  }
  
  // Handle Astro view transitions
  document.addEventListener('astro:page-load', setupLightbox);
</script>