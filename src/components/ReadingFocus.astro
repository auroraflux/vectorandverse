---
// Component for reading focus effect that highlights current reading area
---

<!-- Empty element to ensure component is rendered -->
<div data-reading-focus style="display: none;"></div>

<style is:global>
  /* Reading focus gradient overlay */
  .reading-focus-gradient {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: 10;
    opacity: 0;
    transition: opacity 0.5s ease-out;
  }
  
  .reading-focus-gradient.active {
    opacity: 1;
  }
  
  .reading-focus-gradient::before,
  .reading-focus-gradient::after {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    background: linear-gradient(to bottom, 
      rgba(249, 250, 251, 0) 0%,
      rgba(249, 250, 251, 0.4) 100%
    );
    transition: transform 0.15s ease-out;
  }
  
  .reading-focus-gradient::before {
    top: 0;
    height: 40vh;
    transform: translateY(var(--focus-top, -100%));
  }
  
  .reading-focus-gradient::after {
    bottom: 0;
    height: 40vh;
    background: linear-gradient(to top, 
      rgba(249, 250, 251, 0) 0%,
      rgba(249, 250, 251, 0.4) 100%
    );
    transform: translateY(var(--focus-bottom, 100%));
  }
  
  /* Dark mode support */
  .dark .reading-focus-gradient::before {
    background: linear-gradient(to bottom, 
      rgba(17, 24, 39, 0) 0%,
      rgba(17, 24, 39, 0.4) 100%
    );
  }
  
  .dark .reading-focus-gradient::after {
    background: linear-gradient(to top, 
      rgba(17, 24, 39, 0) 0%,
      rgba(17, 24, 39, 0.4) 100%
    );
  }
  
  /* Per-element opacity approach with stronger effect */
  .prose-content p,
  .prose-content h2,
  .prose-content h3,
  .prose-content h4,
  .prose-content blockquote,
  .prose-content ul,
  .prose-content ol,
  .prose-content pre,
  .prose-content .admonition {
    transition: opacity 0.4s ease-out, filter 0.4s ease-out, transform 0.4s ease-out;
  }
  
  .prose-content.reading-focus-active p,
  .prose-content.reading-focus-active h2,
  .prose-content.reading-focus-active h3,
  .prose-content.reading-focus-active h4,
  .prose-content.reading-focus-active blockquote,
  .prose-content.reading-focus-active ul,
  .prose-content.reading-focus-active ol,
  .prose-content.reading-focus-active pre,
  .prose-content.reading-focus-active .admonition {
    opacity: 0.15;
    filter: blur(1px);
    transform: scale(0.98);
  }
  
  .prose-content.reading-focus-active .in-focus {
    opacity: 1;
    filter: none;
    transform: none;
  }
  
  /* Add subtle highlight to focused content */
  .prose-content.reading-focus-active .in-focus {
    position: relative;
  }
  
  /* Visual indicator that focus mode is active */
  .reading-focus-indicator {
    position: fixed;
    top: 100px;
    right: 20px;
    background: rgba(59, 130, 246, 0.1);
    color: rgb(59, 130, 246);
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    opacity: 0;
    transform: translateX(100px);
    transition: all 0.3s ease;
    pointer-events: none;
    z-index: 50;
  }
  
  .reading-focus-indicator.active {
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  function initReadingFocus() {
    const article = document.querySelector('article');
    if (!article) return;
    
    // Add class to enable focus mode
    article.classList.add('prose-content');
    
    // Create focus indicator
    const indicator = document.createElement('div');
    indicator.className = 'reading-focus-indicator';
    indicator.textContent = 'Reading Focus Active';
    document.body.appendChild(indicator);
    
    // Option 1: Gradient overlay approach (commented out - use element opacity instead)
    /*
    const gradient = document.createElement('div');
    gradient.className = 'reading-focus-gradient';
    document.body.appendChild(gradient);
    
    let scrollTimer: number;
    
    function updateFocusGradient() {
      const scrollY = window.scrollY;
      const viewportHeight = window.innerHeight;
      const focusCenter = scrollY + viewportHeight * 0.4; // Focus at 40% down the viewport
      
      gradient.classList.add('active');
      gradient.style.setProperty('--focus-top', `${-focusCenter}px`);
      gradient.style.setProperty('--focus-bottom', `${focusCenter - viewportHeight}px`);
      
      clearTimeout(scrollTimer);
      scrollTimer = setTimeout(() => {
        gradient.classList.remove('active');
      }, 1000);
    }
    */
    
    // Option 2: Per-element opacity approach
    const elements = article.querySelectorAll('p, h2, h3, h4, blockquote, ul, ol, pre, .admonition');
    
    // Create intersection observer
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -40% 0px', // Focus area in middle 40% of viewport (2x larger)
      threshold: [0, 0.5, 1]
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.intersectionRatio > 0) {
          entry.target.classList.add('in-focus');
        } else {
          entry.target.classList.remove('in-focus');
        }
      });
    }, observerOptions);
    
    // Observe all elements
    elements.forEach(el => observer.observe(el));
    
    // Enable focus mode on scroll
    let isScrolling = false;
    let scrollEndTimer: number;
    
    function handleScroll() {
      if (!isScrolling) {
        article.classList.add('reading-focus-active');
        indicator.classList.add('active');
        isScrolling = true;
      }
      
      clearTimeout(scrollEndTimer);
      scrollEndTimer = window.setTimeout(() => {
        article.classList.remove('reading-focus-active');
        indicator.classList.remove('active');
        isScrolling = false;
      }, 400);
    }
    
    // Use passive listener for better performance
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Cleanup on navigation
    document.addEventListener('astro:before-swap', () => {
      window.removeEventListener('scroll', handleScroll);
      observer.disconnect();
      indicator?.remove();
    });
  }
  
  // Initialize on page load
  document.addEventListener('astro:page-load', initReadingFocus);
</script>