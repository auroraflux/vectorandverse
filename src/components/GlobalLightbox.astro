<div id="global-lightbox" class="lightbox-overlay" aria-hidden="true" role="dialog">
  <div class="lightbox-content">
    <img id="lightbox-image" src="" alt="" />
  </div>
</div>

<style>
  .lightbox-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Ensure it's above other content */
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
  }

  /* State for when the lightbox is open */
  .lightbox-overlay[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
  }

  /* Prevent background scrolling when lightbox is open */
  .lightbox-open {
    overscroll-behavior-y: contain;
    overflow: hidden;
  }

  .lightbox-content {
    max-width: 90vw; /* Max width relative to viewport */
    max-height: 90vh; /* Max height relative to viewport */
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .lightbox-content img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain; /* Ensures the entire image is visible within its bounds */
  }
</style>

<script is:inline>
  let lightboxOverlay;
  let lightboxImage;
  let overlayClickHandler;
  let keydownHandler;
  let documentClickHandler;

  function initLightbox() {
    lightboxOverlay = document.getElementById('global-lightbox');
    lightboxImage = document.getElementById('lightbox-image');
    
    if (!lightboxOverlay || !lightboxImage) return;

    // No need to track scroll position with overscroll-behavior approach

    function openLightbox(src, alt) {
      lightboxImage.src = src;
      lightboxImage.alt = alt;
      lightboxOverlay.setAttribute('aria-hidden', 'false');
      // Prevent scrolling on the body when lightbox is open
      document.documentElement.classList.add('lightbox-open');
    }

    function closeLightbox() {
      lightboxOverlay.setAttribute('aria-hidden', 'true');
      lightboxImage.src = ''; // Clear image src to free memory and prevent flickering
      lightboxImage.alt = '';
      // Restore scrolling on the body
      document.documentElement.classList.remove('lightbox-open');
    }

    // Close on click anywhere on the overlay (but not the image itself)
    overlayClickHandler = (event) => {
      if (event.target === lightboxOverlay || event.target.parentElement === lightboxOverlay) {
        closeLightbox();
      }
    };

    // Close on ESC key press
    keydownHandler = (event) => {
      if (event.key === 'Escape' && lightboxOverlay.getAttribute('aria-hidden') === 'false') {
        closeLightbox();
      }
    };

    // Attach click listeners to all image triggers using event delegation
    documentClickHandler = (event) => {
      const target = event.target.closest('.lightbox-trigger');
      if (target) {
        const src = target.dataset.src;
        const alt = target.dataset.alt;
        if (src) {
          openLightbox(src, alt);
        }
      }
    };

    // Remove any existing listeners first
    cleanupLightbox();

    // Add event listeners
    lightboxOverlay.addEventListener('click', overlayClickHandler);
    document.addEventListener('keydown', keydownHandler);
    document.addEventListener('click', documentClickHandler);
  }

  function cleanupLightbox() {
    if (lightboxOverlay && overlayClickHandler) {
      lightboxOverlay.removeEventListener('click', overlayClickHandler);
    }
    if (keydownHandler) {
      document.removeEventListener('keydown', keydownHandler);
    }
    if (documentClickHandler) {
      document.removeEventListener('click', documentClickHandler);
    }
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', initLightbox);
  
  // Clean up on page navigation
  document.addEventListener('astro:before-swap', cleanupLightbox);

  // Also initialize immediately for the first page load
  initLightbox();
</script>