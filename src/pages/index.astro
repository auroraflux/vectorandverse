---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { getCollection } from 'astro:content';
import { getImage } from 'astro:assets';
import LogoScrollTransform from '../components/LogoScrollTransform.astro';
import '../styles/global.css';

const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);

// Since we're using string paths, we don't need to process images
const postsWithImages = posts.map(post => ({
  ...post,
  heroImageUrl: post.data.heroImage
}));
---

<Layout title="kilowhat!?">
  <LogoScrollTransform />
  <div class="fade-in relative">
    {/* Animated grid background that spans the whole page */}
    <div class="fixed inset-0 -z-10">
      <div class="absolute inset-0 bg-gray-50"></div>
      <div class="absolute inset-0 bg-grid-pattern opacity-40"></div>
      {/* Moving gradient overlay */}
      <div class="absolute inset-0">
        <div class="absolute inset-0 bg-gradient-animated"></div>
      </div>
    </div>
    
    
    {/* Hero Section - Logo-centric design */}
    <section class="relative py-20 md:py-28 flex items-center justify-center min-h-[50vh] hero-section overflow-hidden">
      {/* Animated grid pulses for hero only */}
      <div class="absolute inset-0 -z-10" style="top: -80px; left: 0; right: 0; bottom: -80px;">
        <div class="grid-pulse-container absolute inset-0">
          <div class="pulse pulse-h1"></div>
          <div class="pulse pulse-h2"></div>
          <div class="pulse pulse-h3"></div>
          <div class="pulse pulse-h4"></div>
          <div class="pulse pulse-h5"></div>
          <div class="pulse pulse-h6"></div>
          <div class="pulse pulse-h7"></div>
          <div class="pulse pulse-h8"></div>
          <div class="pulse pulse-v1"></div>
          <div class="pulse pulse-v2"></div>
          <div class="pulse pulse-v3"></div>
          <div class="pulse pulse-v4"></div>
          <div class="pulse pulse-v5"></div>
          <div class="pulse pulse-v6"></div>
          <div class="pulse pulse-v7"></div>
          <div class="pulse pulse-v8"></div>
        </div>
      </div>
      
      <div class="relative z-10 text-center">
        {/* Large static logo */}
        <h1 class="text-[4.5rem] sm:text-[6rem] md:text-[12rem] lg:text-[13.5rem] mb-4 color-morph hero-logo-transition" 
            style="letter-spacing: -0.04em; text-shadow: 0 4px 30px rgba(0,0,0,0.15), 0 2px 10px rgba(0,0,0,0.3); line-height: 0.9;">
          <span style="font-weight: 600;">kilo</span><span style="font-weight: 900; font-style: italic;">what!?</span>
        </h1>
        
        {/* Rotating taglines container */}
        <div class="relative h-12 sm:h-14 md:h-16 overflow-visible flex items-center justify-center">
          <div id="tagline-container" class="relative text-2xl sm:text-3xl md:text-6xl text-gray-400" style="font-weight: 300; font-variation-settings: 'wght' 300; font-style: italic; text-shadow: 0 2px 10px rgba(0,0,0,0.08), 0 1px 3px rgba(0,0,0,0.1);">
            <!-- Content dynamically inserted by JavaScript -->
          </div>
        </div>
        
        {/* Snarky about section - closer to tagline */}
        <div class="mt-12 md:mt-16 text-center max-w-2xl mx-auto px-6">
          {/* Profile Image */}
          <div class="mb-8 flex justify-center">
            <div class="relative group">
              <img 
                src="/images/hk.png" 
                alt="Harsha - Digital native, analog soul"
                class="w-32 h-32 md:w-40 md:h-40 rounded-full object-cover transition-all duration-300 group-hover:scale-105"
                style="filter: grayscale(20%); 
                       box-shadow: inset 0 2px 4px rgba(0,0,0,0.1), 
                                   inset 0 -2px 4px rgba(255,255,255,0.5),
                                   0 1px 2px rgba(255,255,255,0.7);
                       border: 2px solid rgba(255,255,255,0.3);"
              />
              <div class="absolute inset-0 rounded-full bg-gradient-to-tr from-blue-500/10 to-purple-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </div>
          </div>

          <p class="text-lg sm:text-xl text-gray-600 leading-relaxed" style="font-weight: 500;">
            Digital <span class="native-emphasis">native</span>. Analog <span class="soul-emphasis">soul</span>.
          </p>
          
          {/* Snarky intro paragraph */}
          <p class="text-lg sm:text-xl text-gray-600 leading-relaxed mt-6 mb-4" style="font-weight: 500; font-style: italic; font-variation-settings: 'wght' 500;">
            I'm Harsha. I spend my days making sure AI clusters don't catch fire while simultaneously feeding them enough data to ensure they eventually will. 
            It's like being a zookeeper, but the animals are smarter than you and they know it.
          </p>
          
          <p class="text-lg sm:text-xl text-gray-600 leading-relaxed mt-4" style="font-weight: 500; font-style: italic;">
            My hobby is writing about tech with the enthusiasm of someone who's seen enough to know better, <strong>but hopes anyway</strong>.
          </p>
        </div>
        
        {/* About link - minimal style */}
        <div class="mt-6 md:mt-8 text-center">
          <a href="/about" 
             class="about-button inline-block text-sm text-gray-500 hover:text-gray-700 transition-all duration-300 px-6 py-2 rounded-full"
             style="font-weight: 500; letter-spacing: 0.05em;">
            <span>More About This Place</span>
          </a>
        </div>
      </div>
    </section>
    
    <main id="main-content" class="max-w-7xl mx-auto px-6 pb-24 mt-2">
      {/* Latest posts indicator */}
      <div class="mb-6 text-center">
        <p class="text-xl uppercase tracking-[0.3em] text-gray-500 animate-fade-in-up" style="font-weight: 600; animation-delay: 0.5s;">
          Latest Thoughts
        </p>
        <div class="mt-4 text-gray-400 text-2xl animate-enhanced-bounce" style="font-weight: 300;">
          â†“
        </div>
      </div>
      
      <div class="space-y-8">
        {postsWithImages.map((post, index) => {
          const formattedDate = new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          }).format(post.data.date);
          
          const month = new Intl.DateTimeFormat('en-US', {
            month: 'short'
          }).format(post.data.date).toUpperCase();
          
          const year = new Intl.DateTimeFormat('en-US', {
            year: 'numeric'
          }).format(post.data.date);
          
          const day = new Intl.DateTimeFormat('en-US', {
            day: '2-digit'
          }).format(post.data.date);
          
          return (
            <article class="group relative">
              <a href={`/blog/${post.slug}`} class="block relative overflow-hidden h-[400px] md:h-[500px] no-underline rounded-[8px]" data-has-image={post.heroImageUrl ? "true" : "false"}>
                {/* Background Image or Gradient */}
                {post.heroImageUrl ? (
                  <img 
                    src={post.heroImageUrl} 
                    alt={post.data.heroImageAlt || post.data.title}
                    class="absolute inset-0 w-full h-full object-cover hero-image-transition"
                    loading="lazy"
                  />
                ) : (
                  <div class="absolute inset-0 bg-gradient-to-br from-gray-900 to-gray-800"></div>
                )}
                
                {/* Gradient Overlay for readability */}
                <div class="absolute inset-0 transition-all duration-500" style="background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.75) 10%, rgba(0,0,0,0.7) 20%, rgba(0,0,0,0.6) 30%, rgba(0,0,0,0.5) 40%, rgba(0,0,0,0.4) 50%, rgba(0,0,0,0.3) 60%, rgba(0,0,0,0.2) 70%, rgba(0,0,0,0.1) 80%, rgba(0,0,0,0.05) 90%, rgba(0,0,0,0) 100%);"></div>
                
                {/* Content Container */}
                <div class="relative z-10 h-full p-8 md:p-12 lg:p-16 flex flex-col justify-end">
                  <div class="max-w-4xl">
                    {/* Date Display */}
                    <div class="mb-6">
                      <div class="inline-flex items-baseline text-white/90 text-2xl md:text-3xl leading-none" style="text-shadow: 0 4px 30px rgba(0,0,0,0.15), 0 2px 10px rgba(0,0,0,0.3), 0 4px 30px rgba(0,0,0,0.7);">
                        <span style="font-weight: 800; font-feature-settings: 'tnum'; font-variation-settings: 'wght' 800;">
                          {day}
                        </span>
                        <span class="uppercase" style="font-weight: 300; letter-spacing: -0.05em; font-variation-settings: 'wght' 300;">
                          {month}
                        </span>
                        <span style="font-weight: 800; font-feature-settings: 'tnum'; font-variation-settings: 'wght' 800;">
                          {year}
                        </span>
                      </div>
                    </div>
                    
                    {/* Title */}
                    <h2 class="text-4xl md:text-5xl lg:text-6xl text-white leading-[0.9] mb-4 transition-all duration-300 group-hover:translate-x-2" 
                        style="font-weight: 850; letter-spacing: -0.04em; text-shadow: 0 4px 30px rgba(0,0,0,0.15), 0 2px 10px rgba(0,0,0,0.3), 0 4px 30px rgba(0,0,0,0.7);">
                      {post.data.title}
                    </h2>
                    
                    {/* Description */}
                    <p class="text-lg md:text-xl text-white/80 leading-relaxed max-w-3xl" 
                       style="font-weight: 500; text-shadow: 0 2px 4px rgba(0,0,0,0.9), 0 4px 8px rgba(0,0,0,0.7), 0 8px 16px rgba(0,0,0,0.5), 0 16px 32px rgba(0,0,0,0.3);">
                      {post.data.description}
                    </p>
                    
                    {/* Arrow indicator */}
                    <div class="absolute bottom-8 right-8 md:bottom-12 md:right-12 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-4 group-hover:translate-x-0">
                      <span class="text-4xl text-white/60">â†’</span>
                    </div>
                  </div>
                </div>
              </a>
            </article>
          );
        })}
      </div>
    </main>
  </div>
</Layout>

<script>
  // Simple tagline rotation with typewriter effect
  const taglines = [
    "git commit -m 'still believing'",
    "segfault optimism since 2024",
    "try { hope() } catch { blog() }",
    "npm install faith --save-dev",
    "sudo make me believe",
    "undefined is not a feeling",
    "console.log('everything is fine')",
    "AI won't replace my anxiety",
    "docker run -it hope:latest",
    "// TODO: fix everything",
    "merge conflicts with reality",
    "stack overflow but make it poetry",
    "kubernetes for my emotions",
    "cached optimism (expires: never)",
    "rm -rf doubts 2>/dev/null",
    "404: pessimism not found",
    "debugging life in production",
    "ctrl+z doesn't work here",
    "async/await the apocalypse",
    "<div class='silver-lining' />"
  ];
  
  // Fisher-Yates shuffle algorithm
  function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }
  
  function initTaglines() {
    const container = document.getElementById('tagline-container');
    if (!container) return;
    
    // Clear any existing content
    container.innerHTML = '';
    
    // Cancel any existing animations
    if (window.taglineAnimation) {
      clearInterval(window.taglineAnimation.typeInterval);
      clearInterval(window.taglineAnimation.eraseInterval);
      window.taglineAnimation.timeouts.forEach(t => clearTimeout(t));
    }
    
    // Initialize animation state
    window.taglineAnimation = {
      typeInterval: null,
      eraseInterval: null,
      timeouts: []
    };
    
    const shuffledTaglines = shuffleArray(taglines);
    let currentIndex = 0;
    
    function updateDisplay(text, showCursor = true) {
      if (showCursor) {
        container.innerHTML = `<span>${text}</span><span class="tagline-cursor text-gray-400">â”‚</span>`;
      } else {
        container.innerHTML = `<span>${text}</span>`;
      }
    }
    
    function typeTagline() {
      const tagline = shuffledTaglines[currentIndex];
      let charIndex = 0;
      
      updateDisplay('');
      
      window.taglineAnimation.typeInterval = setInterval(() => {
        if (charIndex < tagline.length) {
          updateDisplay(tagline.substring(0, charIndex + 1));
          charIndex++;
        } else {
          clearInterval(window.taglineAnimation.typeInterval);
          
          const timeout = setTimeout(() => {
            eraseTagline();
          }, 3000);
          window.taglineAnimation.timeouts.push(timeout);
        }
      }, 70);
    }
    
    function eraseTagline() {
      let text = shuffledTaglines[currentIndex];
      let charIndex = text.length;
      
      window.taglineAnimation.eraseInterval = setInterval(() => {
        if (charIndex > 0) {
          charIndex--;
          updateDisplay(text.substring(0, charIndex));
        } else {
          clearInterval(window.taglineAnimation.eraseInterval);
          currentIndex = (currentIndex + 1) % shuffledTaglines.length;
          
          const timeout = setTimeout(() => {
            typeTagline();
          }, 500);
          window.taglineAnimation.timeouts.push(timeout);
        }
      }, 50);
    }
    
    // Start animation
    typeTagline();
  }
  
  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTaglines);
  } else {
    initTaglines();
  }
  
  // Re-initialize on Astro navigation
  document.addEventListener('astro:page-load', () => {
    setTimeout(initTaglines, 100);
  });
</script>

